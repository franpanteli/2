-> What is Flask? Lesson Overview  
   -> Lesson Duration: 7 minutes  
   -> Instructor: Brandon Gigous  
   -> Learn what Flask is, its origins, and why it is a popular choice for building web applications  

-> What is Flask?  
   -> Flask is a Python framework designed to help developers build robust and scalable web applications efficiently  
   -> It is considered a microframework, meaning it provides a minimalistic approach, allowing developers to pick and choose the tools and libraries they need  

-> What is a Microframework?  
   -> Microframeworks provide the foundational structure for web applications without enforcing specific tools or libraries  
   -> Unlike full-stack frameworks, microframeworks are lightweight and focus primarily on serving requests and returning responses  
   -> This gives developers control over key decisions like authentication, database integration, and frontend design  

   -> Flask example:  

      ```python
      from flask import Flask  

      app = Flask(__name__)  

      @app.route("/")  
      def home():  
          return "Hello, Flask World!"  

      if __name__ == "__main__":  
          app.run(debug=True)  
      ```  

   -> Key analogy: Think of a microframework as a basic LEGO base plate. You can start with the essentials and build upwards, adding features like authentication and databases  

-> Background and Usage of Flask  
   -> Flask originated as an April Fools' joke by Armin Ronacher but quickly evolved into a widely-used framework  
   -> Flask has powered major platforms and applications, including:  
      -> Pinterest (API backend)  
      -> LinkedIn (internal tools)  
      -> Twilio (public and private APIs)  
      -> Apache Airflow (backend integration)  
      -> Plotly Dash (data visualisation tools)  
      -> Former US President Obama’s 2012 campaign website  

-> Why Use Flask?  
   -> Flask’s minimalistic nature allows rapid setup and customisation of web applications  

      ```python
      from flask import Flask  

      app = Flask(__name__)  

      @app.route("/greet/<name>")  
      def greet(name):  
          return f"Hello, {name}!"  

      if __name__ == "__main__":  
          app.run(debug=True)  
      ```  

   -> You can choose the tools that suit your project, such as:  
      -> Relational databases like PostgreSQL, MySQL, or SQLite  
      -> NoSQL databases like MongoDB  
   -> Flask itself only provides the basic server functionality, but the ecosystem of extensions covers features like authentication, form handling, and database management  

      Example with Flask-SQLAlchemy:  
      ```python
      from flask import Flask  
      from flask_sqlalchemy import SQLAlchemy  

      app = Flask(__name__)  
      app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///data.db"  
      db = SQLAlchemy(app)  

      class User(db.Model):  
          id = db.Column(db.Integer, primary_key=True)  
          username = db.Column(db.String(80), unique=True, nullable=False)  

          def __repr__(self):  
              return f"<User {self.username}>"  

      if __name__ == "__main__":  
          db.create_all()  
          app.run(debug=True)  
      ```  

   -> Extensions for Flask allow it to be tailored to specific project needs. Examples include:  
      -> Flask-WTF for form handling  
      -> Flask-Login for user authentication  
      -> Flask-Migrate for database migrations  

-> Summary: What is Flask?  
   -> Flask is a Python microframework for building lightweight and scalable web applications  
   -> Its simplicity makes it a favourite for startups and enterprises alike  
   -> Flask originated as a joke but has become a vital tool for developers worldwide  
   -> It is flexible, allowing developers to start with minimal features and expand as needed using open-source extensions  
   -> Flask enables rapid development and is suitable for both beginners and advanced developers  

   Example of using Flask with an open-source extension:  

   ```python
   from flask import Flask  
   from flask_wtf import FlaskForm  
   from wtforms import StringField, SubmitField  
   from wtforms.validators import DataRequired  

   app = Flask(__name__)  
   app.secret_key = "your_secret_key"  

   class NameForm(FlaskForm):  
       name = StringField("What is your name?", validators=[DataRequired()])  
       submit = SubmitField("Submit")  

   @app.route("/", methods=["GET", "POST"])  
   def index():  
       form = NameForm()  
       if form.validate_on_submit():  
           return f"Hello, {form.name.data}!"  
       return f''' 
       <form method="post"> 
           {form.csrf_token} 
           {form.name.label} {form.name} 
           {form.submit} 
       </form> 
       '''  

   if __name__ == "__main__":  
       app.run(debug=True)  
